// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: pxrbsjdrcYiKeJrrydSqC9
// Component: sTLuxFVr-H4nw4
import * as React from "react";
import { Link } from "gatsby";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useScreenVariants as useScreenVariantszNo6Oijq3JlNiY } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: ZNo6oijq3JlNiY/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic_library_plasmic_color_type.module.css"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import * as projectcss from "./plasmic_tekkou_studios.module.css"; // plasmic-import: pxrbsjdrcYiKeJrrydSqC9/projectcss
import * as sty from "./PlasmicProductRow.module.css"; // plasmic-import: sTLuxFVr-H4nw4/css
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: 0VwAWSlI1cyKAc/icon
import plant1FeaturedjpgXJ6Q3VVMrm0Gt from "./images/plant1Featuredjpg.png"; // plasmic-import: xJ6Q3vV_MRM0GT/picture
import plant2FeaturedjpgT2YarasV6KLkUc from "./images/plant2Featuredjpg.png"; // plasmic-import: t2yarasV6KLkUc/picture
import plant5FeaturedjpgTiViCtWpbB5Dd from "./images/plant5Featuredjpg.png"; // plasmic-import: tiViCTWpbB5dd_/picture
import plant9FeaturedjpgIEz5Kdu77KUzPs from "./images/plant9Featuredjpg.png"; // plasmic-import: IEz5kdu77KUzPS/picture

createPlasmicElementProxy;

export const PlasmicProductRow__VariantProps = new Array();

export const PlasmicProductRow__ArgProps = new Array();

const $$ = {};

function PlasmicProductRow__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantszNo6Oijq3JlNiY()
  });
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_library_plasmic_color_type_css.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.column__bhvhr)}
      >
        <p.PlasmicImg
          alt={""}
          className={classNames(sty.img__eo49K)}
          displayHeight={"270px"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"100%"}
          loading={"lazy"}
          src={{
            src: plant1FeaturedjpgXJ6Q3VVMrm0Gt,
            fullWidth: 400,
            fullHeight: 400,
            aspectRatio: undefined
          }}
        />

        <div className={classNames(projectcss.all, sty.freeBox__rihM4)}>
          <Icon3Icon
            className={classNames(projectcss.all, sty.svg__m3MG4)}
            role={"img"}
          />
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__cRsg7)}>
          <p.PlasmicLink
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__om1Wc
            )}
            component={Link}
            platform={"gatsby"}
          >
            {"Nulla suscipit "}
          </p.PlasmicLink>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__fr7Ys
            )}
          >
            {"bigplants "}
          </div>
          <h5
            className={classNames(
              projectcss.all,
              projectcss.h5,
              projectcss.__wab_text,
              sty.h5__eeloh
            )}
          >
            {"$49.40 "}
          </h5>
        </div>
      </p.Stack>
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.column__dfCgt)}
      >
        <p.PlasmicImg
          alt={""}
          className={classNames(sty.img__y6Pc)}
          displayHeight={"270px"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"100%"}
          loading={"lazy"}
          src={{
            src: plant2FeaturedjpgT2YarasV6KLkUc,
            fullWidth: 400,
            fullHeight: 400,
            aspectRatio: undefined
          }}
        />

        <div className={classNames(projectcss.all, sty.freeBox__zyEda)}>
          <Icon3Icon
            className={classNames(projectcss.all, sty.svg__q7Ja3)}
            role={"img"}
          />
        </div>
        <div className={classNames(projectcss.all, sty.freeBox___4Zfnv)}>
          <p.PlasmicLink
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__ytYuk
            )}
            component={Link}
            platform={"gatsby"}
          >
            {"Integer porta"}
          </p.PlasmicLink>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__qg0Oe
            )}
          >
            {"cactuses"}
          </div>
          <h5
            className={classNames(
              projectcss.all,
              projectcss.h5,
              projectcss.__wab_text,
              sty.h5__oukJc
            )}
          >
            {"$99.00 "}
          </h5>
        </div>
      </p.Stack>
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.column__oUqzW)}
      >
        <p.PlasmicImg
          alt={""}
          className={classNames(sty.img__xmbhW)}
          displayHeight={"270px"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"100%"}
          loading={"lazy"}
          src={{
            src: plant5FeaturedjpgTiViCtWpbB5Dd,
            fullWidth: 400,
            fullHeight: 400,
            aspectRatio: undefined
          }}
        />

        <div className={classNames(projectcss.all, sty.freeBox__mgd0T)}>
          <Icon3Icon
            className={classNames(projectcss.all, sty.svg__dx5KS)}
            role={"img"}
          />
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__x6Arr)}>
          <p.PlasmicLink
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__eKd2S
            )}
            component={Link}
            platform={"gatsby"}
          >
            {"Vestibulum eget"}
          </p.PlasmicLink>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__jjyTw
            )}
          >
            {"bigplants "}
          </div>
          <h5
            className={classNames(
              projectcss.all,
              projectcss.h5,
              projectcss.__wab_text,
              sty.h5__hizky
            )}
          >
            {"$220.00 "}
          </h5>
        </div>
      </p.Stack>
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.column__nZinn)}
      >
        <p.PlasmicImg
          alt={""}
          className={classNames(sty.img___04Wi9)}
          displayHeight={"270px"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"100%"}
          loading={"lazy"}
          src={{
            src: plant9FeaturedjpgIEz5Kdu77KUzPs,
            fullWidth: 400,
            fullHeight: 400,
            aspectRatio: undefined
          }}
        />

        <div className={classNames(projectcss.all, sty.freeBox__pfGus)}>
          <Icon3Icon
            className={classNames(projectcss.all, sty.svg__nwdBc)}
            role={"img"}
          />
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__nqL28)}>
          <p.PlasmicLink
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__mE8D
            )}
            component={Link}
            platform={"gatsby"}
          >
            {"Fusce sagittis"}
          </p.PlasmicLink>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__aG6Tu
            )}
          >
            {"cactuses"}
          </div>
          <h5
            className={classNames(
              projectcss.all,
              projectcss.h5,
              projectcss.__wab_text,
              sty.h5__hNxou
            )}
          >
            {"$400.40 "}
          </h5>
        </div>
      </p.Stack>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProductRow__ArgProps,
          internalVariantPropNames: PlasmicProductRow__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProductRow__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProductRow";
  } else {
    func.displayName = `PlasmicProductRow.${nodeName}`;
  }
  return func;
}

export const PlasmicProductRow = Object.assign(
  // Top-level PlasmicProductRow renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicProductRow
    internalVariantProps: PlasmicProductRow__VariantProps,
    internalArgProps: PlasmicProductRow__ArgProps
  }
);

export default PlasmicProductRow;
/* prettier-ignore-end */
