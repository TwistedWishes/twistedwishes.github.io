// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: pxrbsjdrcYiKeJrrydSqC9
// Component: uRTKM-ijPWR4nr
import * as React from "react";
import { Link } from "gatsby";
import {
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import MenuButton from "../../MenuButton"; // plasmic-import: tHKra2qqJQ6tmD/component
import { useScreenVariants as useScreenVariantszNo6Oijq3JlNiY } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: ZNo6oijq3JlNiY/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic_library_plasmic_color_type.module.css"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import * as projectcss from "./plasmic_tekkou_studios.module.css"; // plasmic-import: pxrbsjdrcYiKeJrrydSqC9/projectcss
import * as sty from "./PlasmicFaqFooter.module.css"; // plasmic-import: uRTKM-ijPWR4nr/css
import LocationSvgrepoCom1SvgIcon from "./icons/PlasmicIcon__LocationSvgrepoCom1Svg"; // plasmic-import: sTg6IS6-2Zvsfi/icon
import LogoWhiteSvgIcon from "./icons/PlasmicIcon__LogoWhiteSvg"; // plasmic-import: U4HHM8rDMXQhVG/icon
import promoWebpVSvYgMiuzEbT from "./images/promoWebp.webp"; // plasmic-import: V_SvYGMiuzEbT-/picture

createPlasmicElementProxy;

export const PlasmicFaqFooter__VariantProps = new Array();

export const PlasmicFaqFooter__ArgProps = new Array();

const $$ = {};

function PlasmicFaqFooter__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantszNo6Oijq3JlNiY()
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_library_plasmic_color_type_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__gIj9T)}>
        <div className={classNames(projectcss.all, sty.columns___02Ve6)}>
          <div className={classNames(projectcss.all, sty.column__wczY)}>
            <PlasmicImg__
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"562px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"947px"}
              loading={"lazy"}
              src={{
                src: promoWebpVSvYgMiuzEbT,
                fullWidth: 720,
                fullHeight: 525,
                aspectRatio: undefined
              }}
            />
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.column__f9Ku6)}
          >
            <h1
              data-plasmic-name={"h1"}
              data-plasmic-override={overrides.h1}
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1
              )}
            >
              {hasVariant(globalVariants, "screen", "mobile")
                ? "Behold our FAQ"
                : "Still have questions?\nContact us. "}
            </h1>
            <div className={classNames(projectcss.all, sty.columns__yvtQv)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.column___1SbLs)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ldyx4
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobile")
                    ? "Behold our FAQ"
                    : "226 rue St-Joseph E, \nQu\u00e9bec, QC, Canada, \nG1K 3A9"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__sHjmo
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobile")
                    ? "Behold our FAQ"
                    : "+1-202-555-0112"}
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.column__oshZe)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__grlVb
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobile")
                    ? "Behold our FAQ"
                    : "geeks@snipcart.com"}
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__f4PhN)}>
                  <Stack__
                    as={PlasmicLink__}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__afLpE
                    )}
                    component={Link}
                    platform={"gatsby"}
                  >
                    <LocationSvgrepoCom1SvgIcon
                      className={classNames(projectcss.all, sty.svg__hFbQn)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__w1Xle
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobile")
                        ? "Discover"
                        : "On the map"}
                    </div>
                  </Stack__>
                </div>
              </Stack__>
              <div className={classNames(projectcss.all, sty.column__dw5Nf)} />
            </div>
          </Stack__>
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__rQq3)}>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__s8Wpv)}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__qqZz3)}
          >
            <MenuButton
              data-plasmic-name={"menuButton"}
              data-plasmic-override={overrides.menuButton}
              className={classNames("__wab_instance", sty.menuButton)}
            />

            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__umg3)}
            >
              <LogoWhiteSvgIcon
                className={classNames(projectcss.all, sty.svg__rNi9E)}
                role={"img"}
              />

              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link___35SU6
                )}
                component={Link}
                href={"#"}
                platform={"gatsby"}
              >
                {"Store"}
              </PlasmicLink__>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__bfJ0
                )}
                component={Link}
                href={"#"}
                platform={"gatsby"}
              >
                {"About"}
              </PlasmicLink__>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__zjj6C
                )}
                component={Link}
                href={"#"}
                platform={"gatsby"}
              >
                {"Faq"}
              </PlasmicLink__>
            </Stack__>
            <div className={classNames(projectcss.all, sty.freeBox___3VniY)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__btHKw
                )}
              >
                {
                  "\u00a9 Company. All rights reserved. This site proudly built with "
                }
              </div>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__visql
                )}
                component={Link}
                href={"https://www.plasmic.app/"}
                platform={"gatsby"}
              >
                {"Plasmic"}
              </PlasmicLink__>
            </div>
          </Stack__>
        </Stack__>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "img", "h1", "menuButton"],
  img: ["img"],
  h1: ["h1"],
  menuButton: ["menuButton"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFaqFooter__ArgProps,
          internalVariantPropNames: PlasmicFaqFooter__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFaqFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFaqFooter";
  } else {
    func.displayName = `PlasmicFaqFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicFaqFooter = Object.assign(
  // Top-level PlasmicFaqFooter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    h1: makeNodeComponent("h1"),
    menuButton: makeNodeComponent("menuButton"),
    // Metadata about props expected for PlasmicFaqFooter
    internalVariantProps: PlasmicFaqFooter__VariantProps,
    internalArgProps: PlasmicFaqFooter__ArgProps
  }
);

export default PlasmicFaqFooter;
/* prettier-ignore-end */
